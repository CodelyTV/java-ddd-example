// Main project (located in apps/)
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:3.1.5')
    }
}

plugins {
    id "com.diffplug.spotless" version "6.22.0"
}

spotless {
    java {
        prettier(['prettier': '2.8.8', 'prettier-plugin-java': '2.2.0'])
                .config(['parser': 'java', 'useTabs': true, 'printWidth': 120])

        importOrder('\\#', 'java', '', 'tv.codely')
        removeUnusedImports()

        endWithNewline()

        formatAnnotations()
    }
}

// Common for all projects
allprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }


    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }

    ext {
        set('springCloudVersion', "Hoxton.M3")
        set('elasticsearchVersion', '6.8.4')
    }

    dependencies {
        // Prod
        implementation 'org.apache.logging.log4j:log4j-core:2.21.1'
        implementation 'org.apache.logging.log4j:log4j-api:2.21.1'
        implementation 'com.vlkan.log4j2:log4j2-logstash-layout:1.0.5'
        implementation 'io.github.cdimascio:dotenv-java:3.0.0'
        implementation 'org.hibernate.orm:hibernate-core:6.3.1.Final'
        implementation 'jakarta.persistence:jakarta.persistence-api:3.2.0-B01'
        implementation 'org.springframework:spring-orm:6.0.13'
        implementation 'org.springframework:spring-context-support:6.0.13'
        implementation 'org.apache.tomcat:tomcat-dbcp:10.1.15'
        implementation 'com.sun.xml.bind:jaxb-impl:4.0.4'
        implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1'
        implementation 'org.freemarker:freemarker-gae:2.3.32'
        implementation 'org.reflections:reflections:0.10.2'
        implementation 'com.google.guava:guava:31.0.1-jre'
        implementation 'org.springframework.boot:spring-boot-starter-amqp'
        implementation "org.elasticsearch.client:elasticsearch-rest-client:${elasticsearchVersion}"
        implementation "org.elasticsearch.client:elasticsearch-rest-high-level-client:${elasticsearchVersion}"
        implementation 'mysql:mysql-connector-java:8.0.28'

        // Test
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
        testImplementation 'org.mockito:mockito-core:3.3.3'
        testImplementation 'com.github.javafaker:javafaker:1.0.1'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    test {
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    task view_paths {
        doLast { task ->
            println "$task.project.name"
            println "------------------"
            println "Main: $sourceSets.main.java.srcDirTrees"
            println "   Resources: $sourceSets.main.resources.srcDirTrees"
            println "Tests: $sourceSets.test.java.srcDirTrees"
            println "   Resources: $sourceSets.test.resources.srcDirTrees"
        }
    }
}

// All subprojects (located in src/*)
subprojects {
    group = "tv.codely.${rootProject.name}"

    sourceSets {
        main {
            java { srcDirs = ['main'] }
            resources { srcDirs = ['main/resources'] }
        }

        test {
            java { srcDirs = ['test'] }
            resources { srcDirs = ['test/resources'] }
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web:3.1.5'

        testImplementation rootProject.sourceSets.main.output
        testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.5'

        if (project.name != "shared") {
            implementation project(":shared")
            testImplementation project(":shared").sourceSets.test.output
        }
    }

    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }
}


sourceSets {
    main {
        java { srcDirs = ['apps/main'] }
        resources { srcDirs = ['apps/main/resources'] }
    }

    test {
        java { srcDirs = ['apps/test'] }
        resources { srcDirs = ['apps/test/resources'] }
    }
}

bootJar {
    archiveBaseName.set('java-ddd-example')
    archiveVersion.set('0.0.1')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:3.1.5'

    implementation project(":shared")
    implementation project(":backoffice")
    implementation project(":mooc")

    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.5'
    testImplementation project(":shared").sourceSets.test.output
}
